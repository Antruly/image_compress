name: CMake Multi-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            arch: x86
            triplet: x86-windows-static
          - os: windows-latest
            arch: x64
            triplet: x64-windows-static
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest
            arch: x64
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "VCPKG_DEFAULT_TRIPLET=${{ matrix.triplet }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Using vcpkg: $pwd, triplet: ${{ matrix.triplet }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
    
    - name: Install dependencies
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y libpng-dev libjpeg-dev
          echo "Installed libpng-dev and libjpeg-dev on Ubuntu" | tee -a $GITHUB_STEP_SUMMARY
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install libpng libjpeg
          echo "Installed libpng and libjpeg via Homebrew" | tee -a $GITHUB_STEP_SUMMARY
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          vcpkg/vcpkg install libpng libjpeg-turbo zlib --triplet ${{ matrix.triplet }}
          echo "Installed libpng, libjpeg-turbo and zlib via vcpkg (triplet: ${{ matrix.triplet }})" | tee -a $GITHUB_STEP_SUMMARY
        fi
      shell: bash
      
    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        echo "Configured CMake for ${{ matrix.os }}" | tee -a $GITHUB_STEP_SUMMARY
      
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -A ${{ matrix.arch == 'x64' ? 'x64' : 'Win32' }} `
          --debug-output
        echo "Configured CMake for Windows (${{ matrix.arch }}) with vcpkg toolchain" | tee -a $GITHUB_STEP_SUMMARY
      
    - name: Build
      run: |
        cmake --build build --config Release --verbose
        echo "Built project in Release configuration" | tee -a $GITHUB_STEP_SUMMARY
      
    - name: Run tests (if built)
      if: matrix.os != 'windows-latest'  # Windows 测试可能需要额外设置
      working-directory: build
      run: |
        ctest --output-on-failure
        echo "Ran tests successfully" | tee -a $GITHUB_STEP_SUMMARY
        
    - name: Upload build logs
      uses: actions/upload-artifact@v3
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          build/CMakeCache.txt
          build/CMakeFiles/*.log
          build/*.log
        if-no-files-found: ignore